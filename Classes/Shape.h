#pragma once

///=================================================================================
/// include
///=================================================================================
// c++
#include <iostream>
#include <vector>
#include <numbers>

///=================================================================================
/// IShape interfaceClass
///=================================================================================
class IShape {
public:

	///=================================================================================
	/// public Methods
	///=================================================================================

	IShape() = default;
	virtual ~IShape() {}

	virtual void Size() = 0;

	virtual void Draw() = 0;

};

///===============================-=================================================
/// Shape derivedClasses
///=================================================================================

class Circle 
	: public IShape {
public:

	///=================================================================================
	/// public Methods
	///=================================================================================
	
	Circle(float radius) { radius_ = radius; }
	~Circle() = default;

	void Size() override;

	void Draw() override;

private:

	///=================================================================================
	/// private Methods
	///=================================================================================
	
	float radius_;
	float area_;

};

class Rectangle
	: public IShape {
public:

	///=================================================================================
	/// public Methods
	///=================================================================================

	Rectangle(float width, float height) {
		width_ = width;
		height_ = height;
	}
	~Rectangle() = default;

	void Size() override;

	void Draw() override;

private:

	///=================================================================================
	/// private Methods
	///=================================================================================

	float width_;
	float height_;
	float area_;

};